const vmt_QS
   :QS.Print
   :QS.Init
   :QS.Start
   :QS.Sort

func Main()
   t.0 = HeapAllocZ(12)
   [t.0] = :vmt_QS
   t.1 = 10
   if t.0 goto :null0
      Error("null pointer")
   null0:
   t.2 = [t.0]
   t.2 = [t.2+8]
   t.3 = call t.2(t.0 t.1)
   PrintIntS(t.3)
   ret

func QS.Start(this sz)
   t.0 = sz
   t.1 = [this]
   t.1 = [t.1+4]
   t.2 = call t.1(this t.0)
   aux01 = t.2
   t.3 = [this]
   t.3 = [t.3+0]
   t.4 = call t.3(this)
   aux01 = t.4
   PrintIntS(9999)
   t.5 = Sub([this+8] 1)
   aux01 = t.5
   t.6 = aux01
   t.7 = 0
   t.8 = [this]
   t.8 = [t.8+12]
   t.9 = call t.8(this t.7 t.6)
   aux01 = t.9
   t.10 = [this]
   t.10 = [t.10+0]
   t.11 = call t.10(this)
   aux01 = t.11
   t.12 = 0
   ret t.12

func QS.Sort(this left right)
   t = 0
   t.0 = LtS(left right)
   if0 t.0 goto :if0_else
      t.1 = [[this+4]]
      t.1 = Lt(right t.1)
      if t.1 goto :bounds1
         Error("array index out of bounds")
      bounds1:
      t.1 = MulS(right 4)
      t.1 = Add(t.1 [this+4])
      v = [t.1+4]
      t.2 = Sub(left 1)
      i = t.2
      j = right
      cont01 = 1
      while0_top:
      if0 cont01 goto :while0_end
         cont02 = 1
         while1_top:
         if0 cont02 goto :while1_end
            t.3 = Add(i 1)
            i = t.3
            t.4 = [[this+4]]
            t.4 = Lt(i t.4)
            if t.4 goto :bounds1
               Error("array index out of bounds")
            bounds1:
            t.4 = MulS(i 4)
            t.4 = Add(t.4 [this+4])
            aux03 = [t.4+4]
            t.5 = LtS(aux03 v)
            t.6 = Sub(1 t.5)
            if0 t.6 goto :if1_else
               cont02 = 0
               goto :if1_end
            if1_else:
               cont02 = 1
            if1_end:
            goto :while1_top
         while1_end:
         cont02 = 1
         while2_top:
         if0 cont02 goto :while2_end
            t.7 = Sub(j 1)
            j = t.7
            t.8 = [[this+4]]
            t.8 = Lt(j t.8)
            if t.8 goto :bounds1
               Error("array index out of bounds")
            bounds1:
            t.8 = MulS(j 4)
            t.8 = Add(t.8 [this+4])
            aux03 = [t.8+4]
            t.9 = LtS(v aux03)
            t.10 = Sub(1 t.9)
            if0 t.10 goto :if2_else
               cont02 = 0
               goto :if2_end
            if2_else:
               cont02 = 1
            if2_end:
            goto :while2_top
         while2_end:
         t.11 = [[this+4]]
         t.11 = Lt(i t.11)
         if t.11 goto :bounds1
            Error("array index out of bounds")
         bounds1:
         t.11 = MulS(i 4)
         t.11 = Add(t.11 [this+4])
         t = [t.11+4]
         t.12 = [this+4]
         if t.12 goto :null1
            Error("null pointer")
         null1:
         t.13 = [t.12]
         t.13 = Lt(i t.13)
         if t.13 goto :bounds2
            Error("array index out of bounds")
         bounds2:
         t.13 = MulS(i 4)
         t.13 = Add(t.13 t.12)
         t.14 = [[this+4]]
         t.14 = Lt(j t.14)
         if t.14 goto :bounds2
            Error("array index out of bounds")
         bounds2:
         t.14 = MulS(j 4)
         t.14 = Add(t.14 [this+4])
         [t.13+4] = [t.14+4]
         t.15 = [this+4]
         if t.15 goto :null2
            Error("null pointer")
         null2:
         t.16 = [t.15]
         t.16 = Lt(j t.16)
         if t.16 goto :bounds3
            Error("array index out of bounds")
         bounds3:
         t.16 = MulS(j 4)
         t.16 = Add(t.16 t.15)
         [t.16+4] = t
         t.17 = Add(i 1)
         t.18 = LtS(j t.17)
         if0 t.18 goto :if3_else
            cont01 = 0
            goto :if3_end
         if3_else:
            cont01 = 1
         if3_end:
         goto :while0_top
      while0_end:
      t.19 = [this+4]
      if t.19 goto :null3
         Error("null pointer")
      null3:
      t.20 = [t.19]
      t.20 = Lt(j t.20)
      if t.20 goto :bounds4
         Error("array index out of bounds")
      bounds4:
      t.20 = MulS(j 4)
      t.20 = Add(t.20 t.19)
      t.21 = [[this+4]]
      t.21 = Lt(i t.21)
      if t.21 goto :bounds4
         Error("array index out of bounds")
      bounds4:
      t.21 = MulS(i 4)
      t.21 = Add(t.21 [this+4])
      [t.20+4] = [t.21+4]
      t.22 = [this+4]
      if t.22 goto :null4
         Error("null pointer")
      null4:
      t.23 = [t.22]
      t.23 = Lt(i t.23)
      if t.23 goto :bounds5
         Error("array index out of bounds")
      bounds5:
      t.23 = MulS(i 4)
      t.23 = Add(t.23 t.22)
      t.24 = [[this+4]]
      t.24 = Lt(right t.24)
      if t.24 goto :bounds5
         Error("array index out of bounds")
      bounds5:
      t.24 = MulS(right 4)
      t.24 = Add(t.24 [this+4])
      [t.23+4] = [t.24+4]
      t.25 = [this+4]
      if t.25 goto :null5
         Error("null pointer")
      null5:
      t.26 = [t.25]
      t.26 = Lt(right t.26)
      if t.26 goto :bounds6
         Error("array index out of bounds")
      bounds6:
      t.26 = MulS(right 4)
      t.26 = Add(t.26 t.25)
      [t.26+4] = t
      t.27 = Sub(i 1)
      t.28 = t.27
      t.29 = left
      t.30 = [this]
      t.30 = [t.30+12]
      t.31 = call t.30(this t.29 t.28)
      nt = t.31
      t.32 = Add(i 1)
      t.33 = right
      t.34 = t.32
      t.35 = [this]
      t.35 = [t.35+12]
      t.36 = call t.35(this t.34 t.33)
      nt = t.36
      goto :if0_end
   if0_else:
      nt = 0
   if0_end:
   t.37 = 0
   ret t.37

func QS.Print(this)
   j = 0
   while3_top:
   t.0 = LtS(j [this+8])
   if0 t.0 goto :while3_end
      t.1 = [[this+4]]
      t.1 = Lt(j t.1)
      if t.1 goto :bounds6
         Error("array index out of bounds")
      bounds6:
      t.1 = MulS(j 4)
      t.1 = Add(t.1 [this+4])
      PrintIntS([t.1+4])
      t.2 = Add(j 1)
      j = t.2
      goto :while3_top
   while3_end:
   t.3 = 0
   ret t.3

func QS.Init(this sz)
   [this+8] = sz
   t.0 = call :AllocArray(sz)
   [this+4] = t.0
   t.1 = [this+4]
   if t.1 goto :null6
      Error("null pointer")
   null6:
   t.2 = [t.1]
   t.2 = Lt(0 t.2)
   if t.2 goto :bounds7
      Error("array index out of bounds")
   bounds7:
   t.2 = MulS(0 4)
   t.2 = Add(t.2 t.1)
   [t.2+4] = 20
   t.3 = [this+4]
   if t.3 goto :null7
      Error("null pointer")
   null7:
   t.4 = [t.3]
   t.4 = Lt(1 t.4)
   if t.4 goto :bounds8
      Error("array index out of bounds")
   bounds8:
   t.4 = MulS(1 4)
   t.4 = Add(t.4 t.3)
   [t.4+4] = 7
   t.5 = [this+4]
   if t.5 goto :null8
      Error("null pointer")
   null8:
   t.6 = [t.5]
   t.6 = Lt(2 t.6)
   if t.6 goto :bounds9
      Error("array index out of bounds")
   bounds9:
   t.6 = MulS(2 4)
   t.6 = Add(t.6 t.5)
   [t.6+4] = 12
   t.7 = [this+4]
   if t.7 goto :null9
      Error("null pointer")
   null9:
   t.8 = [t.7]
   t.8 = Lt(3 t.8)
   if t.8 goto :bounds10
      Error("array index out of bounds")
   bounds10:
   t.8 = MulS(3 4)
   t.8 = Add(t.8 t.7)
   [t.8+4] = 18
   t.9 = [this+4]
   if t.9 goto :null10
      Error("null pointer")
   null10:
   t.10 = [t.9]
   t.10 = Lt(4 t.10)
   if t.10 goto :bounds11
      Error("array index out of bounds")
   bounds11:
   t.10 = MulS(4 4)
   t.10 = Add(t.10 t.9)
   [t.10+4] = 2
   t.11 = [this+4]
   if t.11 goto :null11
      Error("null pointer")
   null11:
   t.12 = [t.11]
   t.12 = Lt(5 t.12)
   if t.12 goto :bounds12
      Error("array index out of bounds")
   bounds12:
   t.12 = MulS(5 4)
   t.12 = Add(t.12 t.11)
   [t.12+4] = 11
   t.13 = [this+4]
   if t.13 goto :null12
      Error("null pointer")
   null12:
   t.14 = [t.13]
   t.14 = Lt(6 t.14)
   if t.14 goto :bounds13
      Error("array index out of bounds")
   bounds13:
   t.14 = MulS(6 4)
   t.14 = Add(t.14 t.13)
   [t.14+4] = 6
   t.15 = [this+4]
   if t.15 goto :null13
      Error("null pointer")
   null13:
   t.16 = [t.15]
   t.16 = Lt(7 t.16)
   if t.16 goto :bounds14
      Error("array index out of bounds")
   bounds14:
   t.16 = MulS(7 4)
   t.16 = Add(t.16 t.15)
   [t.16+4] = 9
   t.17 = [this+4]
   if t.17 goto :null14
      Error("null pointer")
   null14:
   t.18 = [t.17]
   t.18 = Lt(8 t.18)
   if t.18 goto :bounds15
      Error("array index out of bounds")
   bounds15:
   t.18 = MulS(8 4)
   t.18 = Add(t.18 t.17)
   [t.18+4] = 19
   t.19 = [this+4]
   if t.19 goto :null15
      Error("null pointer")
   null15:
   t.20 = [t.19]
   t.20 = Lt(9 t.20)
   if t.20 goto :bounds16
      Error("array index out of bounds")
   bounds16:
   t.20 = MulS(9 4)
   t.20 = Add(t.20 t.19)
   [t.20+4] = 5
   t.21 = 0
   ret t.21

func AllocArray(size)
   bytes = MulS(size 4)
   bytes = Add(bytes 4)
   v = HeapAllocZ(bytes)
   [v] = size
   ret v

